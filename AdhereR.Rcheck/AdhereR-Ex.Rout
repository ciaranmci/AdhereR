
R version 3.5.3 (2019-03-11) -- "Great Truth"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "AdhereR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "AdhereR-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('AdhereR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CMA0")
> ### * CMA0
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CMA0
> ### Title: CMA0 constructor.
> ### Aliases: CMA0
> 
> ### ** Examples
> 
> cma0 <- CMA0(data=med.events,
+              ID.colname="PATIENT_ID",
+              event.date.colname="DATE",
+              event.duration.colname="DURATION",
+              event.daily.dose.colname="PERDAY",
+              medication.class.colname="CATEGORY",
+              followup.window.start=0,
+              followup.window.start.unit="days",
+              followup.window.duration=2*365,
+              followup.window.duration.unit="days",
+              observation.window.start=30,
+              observation.window.start.unit="days",
+              observation.window.duration=365,
+              observation.window.duration.unit="days",
+              date.format="%m/%d/%Y",
+              summary="Base CMA");
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CMA0", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CMA1")
> ### * CMA1
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CMA1
> ### Title: CMA1 and CMA3 constructors.
> ### Aliases: CMA1 CMA3
> 
> ### ** Examples
> 
> cma1 <- CMA1(data=med.events,
+              ID.colname="PATIENT_ID",
+              event.date.colname="DATE",
+              event.duration.colname="DURATION",
+              followup.window.start=30,
+              observation.window.start=30,
+              observation.window.duration=365,
+              date.format="%m/%d/%Y"
+             );
> cma3 <- CMA3(data=med.events,
+              ID.colname="PATIENT_ID",
+              event.date.colname="DATE",
+              event.duration.colname="DURATION",
+              followup.window.start=30,
+              observation.window.start=30,
+              observation.window.duration=365,
+              date.format="%m/%d/%Y"
+             );
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CMA1", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CMA2")
> ### * CMA2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CMA2
> ### Title: CMA2 and CMA4 constructors.
> ### Aliases: CMA2 CMA4
> 
> ### ** Examples
> 
> ## Not run: 
> ##D cma2 <- CMA2(data=med.events,
> ##D              ID.colname="PATIENT_ID",
> ##D              event.date.colname="DATE",
> ##D              event.duration.colname="DURATION",
> ##D              followup.window.start=30,
> ##D              observation.window.start=30,
> ##D              observation.window.duration=365,
> ##D              date.format="%m/%d/%Y"
> ##D             );
> ##D cma4 <- CMA4(data=med.events,
> ##D              ID.colname="PATIENT_ID",
> ##D              event.date.colname="DATE",
> ##D              event.duration.colname="DURATION",
> ##D              followup.window.start=30,
> ##D              observation.window.start=30,
> ##D              observation.window.duration=365,
> ##D              date.format="%m/%d/%Y"
> ##D             );
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CMA2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CMA5")
> ### * CMA5
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CMA5
> ### Title: CMA5 constructor.
> ### Aliases: CMA5
> 
> ### ** Examples
> 
> cma5 <- CMA5(data=med.events,
+              ID.colname="PATIENT_ID",
+              event.date.colname="DATE",
+              event.duration.colname="DURATION",
+              event.daily.dose.colname="PERDAY",
+              medication.class.colname="CATEGORY",
+              carry.only.for.same.medication=FALSE,
+              consider.dosage.change=FALSE,
+              followup.window.start=30,
+              observation.window.start=30,
+              observation.window.duration=365,
+              date.format="%m/%d/%Y"
+             );
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CMA5", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CMA6")
> ### * CMA6
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CMA6
> ### Title: CMA6 constructor.
> ### Aliases: CMA6
> 
> ### ** Examples
> 
> cma6 <- CMA6(data=med.events,
+              ID.colname="PATIENT_ID",
+              event.date.colname="DATE",
+              event.duration.colname="DURATION",
+              event.daily.dose.colname="PERDAY",
+              medication.class.colname="CATEGORY",
+              carry.only.for.same.medication=FALSE,
+              consider.dosage.change=FALSE,
+              followup.window.start=30,
+              observation.window.start=30,
+              observation.window.duration=365,
+              date.format="%m/%d/%Y"
+             );
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CMA6", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CMA7")
> ### * CMA7
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CMA7
> ### Title: CMA7 constructor.
> ### Aliases: CMA7
> 
> ### ** Examples
> 
> cma7 <- CMA7(data=med.events,
+              ID.colname="PATIENT_ID",
+              event.date.colname="DATE",
+              event.duration.colname="DURATION",
+              event.daily.dose.colname="PERDAY",
+              medication.class.colname="CATEGORY",
+              carry.only.for.same.medication=FALSE,
+              consider.dosage.change=FALSE,
+              followup.window.start=30,
+              observation.window.start=30,
+              observation.window.duration=365,
+              date.format="%m/%d/%Y"
+             );
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CMA7", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CMA8")
> ### * CMA8
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CMA8
> ### Title: CMA8 constructor.
> ### Aliases: CMA8
> 
> ### ** Examples
> 
> cma8 <- CMA8(data=med.events,
+              ID.colname="PATIENT_ID",
+              event.date.colname="DATE",
+              event.duration.colname="DURATION",
+              event.daily.dose.colname="PERDAY",
+              medication.class.colname="CATEGORY",
+              carry.only.for.same.medication=FALSE,
+              consider.dosage.change=FALSE,
+              followup.window.start=30,
+              observation.window.start=30,
+              observation.window.duration=365,
+              date.format="%m/%d/%Y"
+             );
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CMA8", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CMA9")
> ### * CMA9
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CMA9
> ### Title: CMA9 constructor.
> ### Aliases: CMA9
> 
> ### ** Examples
> 
> cma9 <- CMA9(data=med.events,
+              ID.colname="PATIENT_ID",
+              event.date.colname="DATE",
+              event.duration.colname="DURATION",
+              event.daily.dose.colname="PERDAY",
+              medication.class.colname="CATEGORY",
+              carry.only.for.same.medication=FALSE,
+              consider.dosage.change=FALSE,
+              followup.window.start=30,
+              observation.window.start=30,
+              observation.window.duration=365,
+              date.format="%m/%d/%Y"
+             );
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CMA9", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CMA_per_episode")
> ### * CMA_per_episode
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CMA_per_episode
> ### Title: CMA_per_episode constructor.
> ### Aliases: CMA_per_episode
> 
> ### ** Examples
> 
> ## Not run: 
> ##D cmaE <- CMA_per_episode(CMA="CMA1",
> ##D                         data=med.events,
> ##D                         ID.colname="PATIENT_ID",
> ##D                         event.date.colname="DATE",
> ##D                         event.duration.colname="DURATION",
> ##D                         event.daily.dose.colname="PERDAY",
> ##D                         medication.class.colname="CATEGORY",
> ##D                         carry.only.for.same.medication=FALSE,
> ##D                         consider.dosage.change=FALSE,
> ##D                         followup.window.start=0,
> ##D                         observation.window.start=0,
> ##D                         observation.window.duration=365,
> ##D                         date.format="%m/%d/%Y"
> ##D                        );
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CMA_per_episode", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CMA_polypharmacy")
> ### * CMA_polypharmacy
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CMA_polypharmacy
> ### Title: CMA constructor for polypharmacy.
> ### Aliases: CMA_polypharmacy
> 
> ### ** Examples
> 
> ## Not run: 
> ##D CMA_PP <- CMA_polypharmacy(data = med.events.pp,
> ##D medication.groups = med.groups,
> ##D CMA.to.apply = "CMA7", 
> ##D aggregate.first = TRUE, # aggregate before summarizing
> ##D aggregation.method = "mean", # compute mean of CMAs
> ##D aggregation.method.arguments = list(na.rm = TRUE), # remove NA's during calculation
> ##D thresholds = NA, # don't apply threshold
> ##D ID.colname="PATIENT_ID",
> ##D event.date.colname="DATE",
> ##D event.duration.colname="DURATION",
> ##D event.daily.dose.colname="PERDAY",
> ##D medication.class.colname="CATEGORY",
> ##D followup.window.start=0,
> ##D observation.window.start=180,
> ##D observation.window.duration=365,
> ##D carry.only.for.same.medication = TRUE);
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CMA_polypharmacy", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CMA_sliding_window")
> ### * CMA_sliding_window
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CMA_sliding_window
> ### Title: CMA_sliding_window constructor.
> ### Aliases: CMA_sliding_window
> 
> ### ** Examples
> 
> ## Not run: 
> ##D cmaW <- CMA_sliding_window(CMA="CMA1",
> ##D                            data=med.events,
> ##D                            ID.colname="PATIENT_ID",
> ##D                            event.date.colname="DATE",
> ##D                            event.duration.colname="DURATION",
> ##D                            event.daily.dose.colname="PERDAY",
> ##D                            medication.class.colname="CATEGORY",
> ##D                            carry.only.for.same.medication=FALSE,
> ##D                            consider.dosage.change=FALSE,
> ##D                            followup.window.start=0,
> ##D                            observation.window.start=0,
> ##D                            observation.window.duration=365,
> ##D                            sliding.window.start=0,
> ##D                            sliding.window.start.unit="days",
> ##D                            sliding.window.duration=90,
> ##D                            sliding.window.duration.unit="days",
> ##D                            sliding.window.step.duration=7,
> ##D                            sliding.window.step.unit="days",
> ##D                            sliding.window.no.steps=NA,
> ##D                            date.format="%m/%d/%Y"
> ##D                           );
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CMA_sliding_window", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("compute_event_durations")
> ### * compute_event_durations
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: compute_event_durations
> ### Title: Computation of event durations.
> ### Aliases: compute_event_durations
> 
> ### ** Examples
> 
> ## Not run: 
> ##D event_durations <- compute_event_durations(disp.data = durcomp.dispensing,
> ##D                                            presc.data = durcomp.prescribing,
> ##D                                            special.periods.data = durcomp.hospitalisation,
> ##D                                            ID.colname = "ID",
> ##D                                            presc.date.colname = "DATE.PRESC",
> ##D                                            disp.date.colname = "DATE.DISP",
> ##D                                            medication.class.colnames = c("ATC.CODE",
> ##D                                            "UNIT", "FORM"),
> ##D                                            total.dose.colname = "TOTAL.DOSE",
> ##D                                            presc.daily.dose.colname = "DAILY.DOSE",
> ##D                                            presc.duration.colname = "PRESC.DURATION",
> ##D                                            visit.colname = "VISIT",
> ##D                                            split.on.dosage.change = TRUE,
> ##D                                            force.init.presc = TRUE,
> ##D                                            force.presc.renew = TRUE,
> ##D                                            trt.interruption = "continue",
> ##D                                            special.periods.method = "continue",
> ##D                                            date.format = "%Y-%m-%d",
> ##D                                            suppress.warnings = FALSE,
> ##D                                            return.data.table = TRUE);
> ##D        
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("compute_event_durations", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cover_special_periods")
> ### * cover_special_periods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cover_special_periods
> ### Title: Cover special periods.
> ### Aliases: cover_special_periods
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # select medication class of interest and compute event durations
> ##D disp_data <- durcomp.dispensing[ID == 3 & grepl("J01EE01", ATC.CODE)]
> ##D presc_data <- durcomp.prescribing[ID == 3 & grepl("J01EE01", ATC.CODE)]
> ##D 
> ##D event_durations_list <- compute_event_durations(disp.data = disp_data,
> ##D                                                 presc.data = presc_data,
> ##D                                                 special.periods.data = durcomp.hospitalisation,
> ##D                                                 special.periods.method = "carryover",
> ##D                                                 ID.colname = "ID",
> ##D                                                 presc.date.colname = "DATE.PRESC",
> ##D                                                 disp.date.colname = "DATE.DISP",
> ##D                                                 date.format = "%Y-%m-%d",
> ##D                                                 medication.class.colnames = c("ATC.CODE",
> ##D                                                                               "UNIT",
> ##D                                                                               "FORM"),
> ##D                                                 total.dose.colname = "TOTAL.DOSE",
> ##D                                                 presc.daily.dose.colname = "DAILY.DOSE",
> ##D                                                 presc.duration.colname = "PRESC.DURATION",
> ##D                                                 visit.colname = "VISIT",
> ##D                                                 force.init.presc = TRUE,
> ##D                                                 force.presc.renew = TRUE,
> ##D                                                 split.on.dosage.change = TRUE,
> ##D                                                 trt.interruption = "carryover",
> ##D                                                 suppress.warnings = FALSE,
> ##D                                                 return.data.table = TRUE,
> ##D                                                 progress.bar = FALSE)
> ##D 
> ##D event_durations <- prune_event_durations(event_durations_list,
> ##D                                          include = c("special periods"),
> ##D                                          medication.class.colnames = "ATC.CODE",
> ##D                                          days.within.out.date.1 = 7,
> ##D                                          days.within.out.date.2 = 30,
> ##D                                          keep.all = TRUE)
> ##D 
> ##D # cover special periods
> ##D special_periods <- event_durations_list$special_periods
> ##D event_durations_covered <- cover_special_periods(events.data = event_durations,
> ##D                                                  special.periods.data = special_periods,
> ##D                                                  ID.colname = "ID",
> ##D                                                  medication.class.colnames = "ATC.CODE",
> ##D                                                  disp.start.colname = "DISP.START",
> ##D                                                  duration.colname = "DURATION",
> ##D                                                  days.before = 7,
> ##D                                                  days.after = 7,
> ##D                                                  date.format = "%Y-%m-%d")
> ##D        
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cover_special_periods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.plotted.events")
> ### * get.plotted.events
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get.plotted.events
> ### Title: Get info about the plotted events.
> ### Aliases: get.plotted.events
> 
> ### ** Examples
> 
> cma7 <- CMA7(data=med.events[med.events$PATIENT_ID %in% c(1,2),],
+              ID.colname="PATIENT_ID",
+              event.date.colname="DATE",
+              event.duration.colname="DURATION",
+              event.daily.dose.colname="PERDAY",
+              medication.class.colname="CATEGORY",
+              followup.window.start=0,
+              followup.window.start.unit="days",
+              followup.window.duration=2*365,
+              followup.window.duration.unit="days",
+              observation.window.start=30,
+              observation.window.start.unit="days",
+              observation.window.duration=365,
+              observation.window.duration.unit="days",
+              date.format="%m/%d/%Y",
+              summary="Base CMA");
> plot(cma7);
> tmp <- get.plotted.events();
> head(tmp);
    PATIENT_ID       DATE PERDAY CATEGORY DURATION .DATE.as.Date .X.OW.START
286          1 04/26/2033      4     medA       50    2033-04-26       202.9
287          1 07/04/2033      4     medB       30    2033-07-04       202.9
288          1 08/03/2033      4     medB       30    2033-08-03       202.9
289          1 08/17/2033      4     medB       30    2033-08-17       202.9
291          1 10/13/2033      4     medB       30    2033-10-13       202.9
290          1 10/16/2033      4     medB       30    2033-10-16       202.9
    .X.OW.END .Y.OW.START .Y.OW.END .X.ROW.START .X.ROW.END .Y.ROW.START
286     567.9         0.5      24.5           NA         NA           NA
287     567.9         0.5      24.5           NA         NA           NA
288     567.9         0.5      24.5           NA         NA           NA
289     567.9         0.5      24.5           NA         NA           NA
291     567.9         0.5      24.5           NA         NA           NA
290     567.9         0.5      24.5           NA         NA           NA
    .Y.ROW.END .X.FUW.START .X.FUW.END .Y.FUW.START .Y.FUW.END .X.START .X.END
286         NA        172.9      902.9          0.5       24.5    172.9  222.9
287         NA        172.9      902.9          0.5       24.5    241.9  271.9
288         NA        172.9      902.9          0.5       24.5    271.9  301.9
289         NA        172.9      902.9          0.5       24.5    285.9  315.9
291         NA        172.9      902.9          0.5       24.5    342.9  372.9
290         NA        172.9      902.9          0.5       24.5    345.9  375.9
    .Y.START .Y.END .EV.LWD .X.DOSE .Y.DOSE .FONT.SIZE.DOSE .X.EVC.START
286        1      1       2      NA      NA              NA           NA
287        2      2       2      NA      NA              NA        241.9
288        3      3       2      NA      NA              NA        271.9
289        4      4       2      NA      NA              NA        285.9
291        5      5       2      NA      NA              NA        342.9
290        6      6       2      NA      NA              NA        345.9
    .X.EVC.END .Y.EVC.START .Y.EVC.END .X.EVNC.START .X.EVNC.END .Y.EVNC.START
286         NA           NA         NA            NA          NA            NA
287      271.9     1.617345   2.382655            NA          NA            NA
288      285.9     2.617345   3.382655            NA          NA            NA
289      331.9     3.617345   4.382655         331.9       342.9      3.617345
291      345.9     4.617345   5.382655            NA          NA            NA
290      383.9     5.617345   6.382655            NA          NA            NA
    .Y.EVNC.END .X.CNT.START .X.CNT.END .Y.CNT.START .Y.CNT.END .X.SCMA.START
286          NA        222.9      241.9            1          2             0
287          NA        271.9      271.9            2          3             0
288          NA        301.9      285.9            3          4             0
289    4.382655        315.9      342.9            4          5             0
291          NA        372.9      345.9            5          6             0
290          NA        375.9      383.9            6          7             0
    .X.SCMA.END .Y.SCMA.START .Y.SCMA.END
286      138.32          11.5        13.5
287      138.32          11.5        13.5
288      138.32          11.5        13.5
289      138.32          11.5        13.5
291      138.32          11.5        13.5
290      138.32          11.5        13.5
> # "Mask" the first event:
> rect(tmp$.X.START[1], tmp$.Y.START[1]-0.5, tmp$.X.END[1], tmp$.Y.END[1]+0.5,
+      col=adjustcolor("white",alpha.f=0.75), border="black");
> # "Mask" the first patient's summary CMA:
> rect(tmp$.X.SCMA.START[1], tmp$.Y.SCMA.START[1],
+      tmp$.X.SCMA.END[1], tmp$.Y.SCMA.END[1],
+      col=adjustcolor("white",alpha.f=0.75), border="black");
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.plotted.events", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getCMA")
> ### * getCMA
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getCMA
> ### Title: Access the actual CMA estimate from a CMA object.
> ### Aliases: getCMA
> 
> ### ** Examples
> 
> cma1 <- CMA1(data=med.events,
+              ID.colname="PATIENT_ID",
+              event.date.colname="DATE",
+              event.duration.colname="DURATION",
+              followup.window.start=30,
+              observation.window.start=30,
+              observation.window.duration=365,
+              date.format="%m/%d/%Y"
+             );
> getCMA(cma1);
    PATIENT_ID       CMA
1            1 1.0030395
2            2 0.9659091
3            3 1.1142857
4            4        NA
5            5 0.4143646
6            6 0.2318841
7            7 0.7142857
8            8 1.0263930
9            9 1.1173184
10          10 1.0204082
11          11 6.0000000
12          12 0.6185567
13          13 0.4000000
14          14 0.6685237
15          15 0.6037736
16          16 1.0835913
17          17 0.5976096
18          18 0.1562500
19          19        NA
20          20 0.5464481
21          21 0.4491018
22          22 0.3378378
23          23 0.6896552
24          24 0.2590674
25          25 0.4032258
26          26 0.6461538
27          27 1.0135135
28          28 0.7886435
29          29 0.9345794
30          30 0.6551724
31          31 0.4545455
32          32        NA
33          33 0.1382488
34          34 1.0196078
35          35 0.3858521
36          36 1.0169492
37          37 0.5653710
38          38 1.8518519
39          39 1.0900474
40          40 0.7664234
41          41        NA
42          42 0.8097166
43          43 0.8454810
44          44 0.5813953
45          45 1.3274336
46          46 1.0526316
47          47 0.8856089
48          48 0.7023411
49          49 0.2714932
50          50 0.7462687
51          51 0.5494505
52          52 0.8032129
53          53        NA
54          54 0.2525253
55          55 0.3546099
56          56 0.3550296
57          57        NA
58          58 1.3333333
59          59 1.4409222
60          60 0.3597122
61          61 0.8791209
62          62 0.4000000
63          63        NA
64          64 0.5726872
65          65 0.8902077
66          66 1.0791367
67          67 0.9836066
68          68 0.3188406
69          69        NA
70          70 0.7368421
71          71 0.4524887
72          72 0.4166667
73          73 0.7518797
74          74        NA
75          75 1.4285714
76          76 1.0588235
77          77 0.1197605
78          78 0.8761329
79          79 0.9063444
80          80 1.0714286
81          81 0.3212851
82          82 1.2048193
83          83 0.4310345
84          84 0.7894737
85          85 0.4294479
86          86 0.7874016
87          87 1.1555556
88          88 0.3921569
89          89 0.3597122
90          90 0.5150215
91          91        NA
92          92 0.9375000
93          93 0.6228374
94          94 0.9811321
95          95 0.7042254
96          96 1.3986014
97          97 0.4095563
98          98 0.7246377
99          99 0.8510638
100        100 1.2048193
> ## Not run: 
> ##D cmaE <- CMA_per_episode(CMA="CMA1",
> ##D                         data=med.events,
> ##D                         ID.colname="PATIENT_ID",
> ##D                         event.date.colname="DATE",
> ##D                         event.duration.colname="DURATION",
> ##D                         event.daily.dose.colname="PERDAY",
> ##D                         medication.class.colname="CATEGORY",
> ##D                         carry.only.for.same.medication=FALSE,
> ##D                         consider.dosage.change=FALSE,
> ##D                         followup.window.start=0,
> ##D                         observation.window.start=0,
> ##D                         observation.window.duration=365,
> ##D                         date.format="%m/%d/%Y"
> ##D                        );
> ##D getCMA(cmaE);
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getCMA", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("last.plot.get.info")
> ### * last.plot.get.info
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: last.plot.get.info
> ### Title: Access last adherence plot info.
> ### Aliases: last.plot.get.info
> 
> ### ** Examples
> 
> cma7 <- CMA7(data=med.events[med.events$PATIENT_ID %in% c(1,2),],
+              ID.colname="PATIENT_ID",
+              event.date.colname="DATE",
+              event.duration.colname="DURATION",
+              event.daily.dose.colname="PERDAY",
+              medication.class.colname="CATEGORY",
+              followup.window.start=0,
+              followup.window.start.unit="days",
+              followup.window.duration=2*365,
+              followup.window.duration.unit="days",
+              observation.window.start=30,
+              observation.window.start.unit="days",
+              observation.window.duration=365,
+              observation.window.duration.unit="days",
+              date.format="%m/%d/%Y",
+              summary="Base CMA");
> plot(cma7);
> tmp <- last.plot.get.info();
> names(tmp);
[1] "baseR" "SVG"  
> tmp$baseR$legend$box; # legend position and size
   x.start   y.start    x.end    y.end
1 1230.031 0.5739826 1875.938 11.67098
> head(tmp$baseR$cma$data); # events + plotting info
    PATIENT_ID       DATE PERDAY CATEGORY DURATION .DATE.as.Date .X.OW.START
286          1 04/26/2033      4     medA       50    2033-04-26       202.9
287          1 07/04/2033      4     medB       30    2033-07-04       202.9
288          1 08/03/2033      4     medB       30    2033-08-03       202.9
289          1 08/17/2033      4     medB       30    2033-08-17       202.9
291          1 10/13/2033      4     medB       30    2033-10-13       202.9
290          1 10/16/2033      4     medB       30    2033-10-16       202.9
    .X.OW.END .Y.OW.START .Y.OW.END .X.ROW.START .X.ROW.END .Y.ROW.START
286     567.9         0.5      24.5           NA         NA           NA
287     567.9         0.5      24.5           NA         NA           NA
288     567.9         0.5      24.5           NA         NA           NA
289     567.9         0.5      24.5           NA         NA           NA
291     567.9         0.5      24.5           NA         NA           NA
290     567.9         0.5      24.5           NA         NA           NA
    .Y.ROW.END .X.FUW.START .X.FUW.END .Y.FUW.START .Y.FUW.END .X.START .X.END
286         NA        172.9      902.9          0.5       24.5    172.9  222.9
287         NA        172.9      902.9          0.5       24.5    241.9  271.9
288         NA        172.9      902.9          0.5       24.5    271.9  301.9
289         NA        172.9      902.9          0.5       24.5    285.9  315.9
291         NA        172.9      902.9          0.5       24.5    342.9  372.9
290         NA        172.9      902.9          0.5       24.5    345.9  375.9
    .Y.START .Y.END .EV.LWD .X.DOSE .Y.DOSE .FONT.SIZE.DOSE .X.EVC.START
286        1      1       2      NA      NA              NA           NA
287        2      2       2      NA      NA              NA        241.9
288        3      3       2      NA      NA              NA        271.9
289        4      4       2      NA      NA              NA        285.9
291        5      5       2      NA      NA              NA        342.9
290        6      6       2      NA      NA              NA        345.9
    .X.EVC.END .Y.EVC.START .Y.EVC.END .X.EVNC.START .X.EVNC.END .Y.EVNC.START
286         NA           NA         NA            NA          NA            NA
287      271.9     1.617345   2.382655            NA          NA            NA
288      285.9     2.617345   3.382655            NA          NA            NA
289      331.9     3.617345   4.382655         331.9       342.9      3.617345
291      345.9     4.617345   5.382655            NA          NA            NA
290      383.9     5.617345   6.382655            NA          NA            NA
    .Y.EVNC.END .X.CNT.START .X.CNT.END .Y.CNT.START .Y.CNT.END .X.SCMA.START
286          NA        222.9      241.9            1          2             0
287          NA        271.9      271.9            2          3             0
288          NA        301.9      285.9            3          4             0
289    4.382655        315.9      342.9            4          5             0
291          NA        372.9      345.9            5          6             0
290          NA        375.9      383.9            6          7             0
    .X.SCMA.END .Y.SCMA.START .Y.SCMA.END
286      138.32          11.5        13.5
287      138.32          11.5        13.5
288      138.32          11.5        13.5
289      138.32          11.5        13.5
291      138.32          11.5        13.5
290      138.32          11.5        13.5
> # Add a transparent blue rect between days 270 and 900:
> rect(tmp$baseR$.map.event.x(270), tmp$baseR$.map.event.y(1-0.5),
+      tmp$baseR$.map.event.x(900), tmp$baseR$.map.event.y(nrow(tmp$baseR$cma$data)+0.5),
+      col=adjustcolor("blue",alpha.f=0.5), border="blue");
> # Add a transparent rect rect between dates 03/15/2036 and 03/15/2037:
> rect(tmp$baseR$.map.event.date(as.Date("03/15/2036", format="%m/%d/%Y")),
+      tmp$baseR$.map.event.y(1-0.5),
+      tmp$baseR$.map.event.date(as.Date("03/15/2037", format="%m/%d/%Y")),
+      tmp$baseR$.map.event.y(nrow(tmp$baseR$cma$data)+0.5),
+      col=adjustcolor("red",alpha.f=0.5), border="blue");
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("last.plot.get.info", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("map.event.coords.to.plot")
> ### * map.event.coords.to.plot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: map.event.coords.to.plot
> ### Title: Map from event to plot coordinates.
> ### Aliases: map.event.coords.to.plot
> 
> ### ** Examples
> 
> cma7 <- CMA7(data=med.events[med.events$PATIENT_ID %in% c(1,2),],
+              ID.colname="PATIENT_ID",
+              event.date.colname="DATE",
+              event.duration.colname="DURATION",
+              event.daily.dose.colname="PERDAY",
+              medication.class.colname="CATEGORY",
+              followup.window.start=0,
+              followup.window.start.unit="days",
+              followup.window.duration=2*365,
+              followup.window.duration.unit="days",
+              observation.window.start=30,
+              observation.window.start.unit="days",
+              observation.window.duration=365,
+              observation.window.duration.unit="days",
+              date.format="%m/%d/%Y",
+              summary="Base CMA");
> plot(cma7);
> # Add a transparent blue rect:
> rect(map.event.coords.to.plot(x=270),
+      get.event.plotting.area()["y.min"]-1,
+      map.event.coords.to.plot(x="03/15/2037", x.is.Date=TRUE, x.date.format="%m/%d/%Y"),
+      get.event.plotting.area()["y.max"]+1,
+      col=adjustcolor("blue",alpha.f=0.5), border="blue");
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("map.event.coords.to.plot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.CMA0")
> ### * plot.CMA0
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.CMA0
> ### Title: Plot CMA0 objects.
> ### Aliases: plot.CMA0
> 
> ### ** Examples
> 
> cma0 <- CMA0(data=med.events,
+              ID.colname="PATIENT_ID",
+              event.date.colname="DATE",
+              event.duration.colname="DURATION",
+              event.daily.dose.colname="PERDAY",
+              medication.class.colname="CATEGORY",
+              followup.window.start=0,
+              followup.window.start.unit="days",
+              followup.window.duration=2*365,
+              followup.window.duration.unit="days",
+              observation.window.start=30,
+              observation.window.start.unit="days",
+              observation.window.duration=365,
+              observation.window.duration.unit="days",
+              date.format="%m/%d/%Y",
+              summary="Base CMA");
> plot(cma0, patients.to.plot=c("1","2"));
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.CMA0", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.CMA1")
> ### * plot.CMA1
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.CMA1
> ### Title: Plot CMA0-derived objects.
> ### Aliases: plot.CMA1 plot.CMA2 plot.CMA3 plot.CMA4 plot.CMA5 plot.CMA6
> ###   plot.CMA7 plot.CMA8 plot.CMA9
> 
> ### ** Examples
> 
> cma1 <- CMA1(data=med.events,
+              ID.colname="PATIENT_ID",
+              event.date.colname="DATE",
+              event.duration.colname="DURATION",
+              followup.window.start=30,
+              observation.window.start=30,
+              observation.window.duration=365,
+              date.format="%m/%d/%Y"
+             );
> plot(cma1, patients.to.plot=c("1","2"));
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.CMA1", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.CMA_per_episode")
> ### * plot.CMA_per_episode
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.CMA_per_episode
> ### Title: Plot CMA_per_episode and CMA_sliding_window objects.
> ### Aliases: plot.CMA_per_episode plot.CMA_sliding_window
> 
> ### ** Examples
> 
> ## Not run: 
> ##D cmaW <- CMA_sliding_window(CMA=CMA1,
> ##D                         data=med.events,
> ##D                         ID.colname="PATIENT_ID",
> ##D                         event.date.colname="DATE",
> ##D                         event.duration.colname="DURATION",
> ##D                         event.daily.dose.colname="PERDAY",
> ##D                         medication.class.colname="CATEGORY",
> ##D                         carry.only.for.same.medication=FALSE,
> ##D                         consider.dosage.change=FALSE,
> ##D                         followup.window.start=0,
> ##D                         observation.window.start=0,
> ##D                         observation.window.duration=365,
> ##D                         sliding.window.start=0,
> ##D                         sliding.window.start.unit="days",
> ##D                         sliding.window.duration=90,
> ##D                         sliding.window.duration.unit="days",
> ##D                         sliding.window.step.duration=7,
> ##D                         sliding.window.step.unit="days",
> ##D                         sliding.window.no.steps=NA,
> ##D                         date.format="%m/%d/%Y"
> ##D                        );
> ##D plot(cmaW, patients.to.plot=c("1","2"));
> ##D cmaE <- CMA_per_episode(CMA=CMA1,
> ##D                         data=med.events,
> ##D                         ID.colname="PATIENT_ID",
> ##D                         event.date.colname="DATE",
> ##D                         event.duration.colname="DURATION",
> ##D                         event.daily.dose.colname="PERDAY",
> ##D                         medication.class.colname="CATEGORY",
> ##D                         carry.only.for.same.medication=FALSE,
> ##D                         consider.dosage.change=FALSE,
> ##D                         followup.window.start=0,
> ##D                         observation.window.start=0,
> ##D                         observation.window.duration=365,
> ##D                         date.format="%m/%d/%Y"
> ##D                        );
> ##D plot(cmaE, patients.to.plot=c("1","2"));
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.CMA_per_episode", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot_interactive_cma")
> ### * plot_interactive_cma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot_interactive_cma
> ### Title: Interactive exploration and CMA computation.
> ### Aliases: plot_interactive_cma
> 
> ### ** Examples
> 
> ## Not run: 
> ##D plot_interactive_cma(med.events,
> ##D                      ID.colname="PATIENT_ID",
> ##D                      event.date.colname="DATE",
> ##D                      event.duration.colname="DURATION",
> ##D                      event.daily.dose.colname="PERDAY",
> ##D                      medication.class.colname="CATEGORY");
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot_interactive_cma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("print.CMA0")
> ### * print.CMA0
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: print.CMA0
> ### Title: Print CMA0 (and derived) objects.
> ### Aliases: print.CMA0 print.CMA1 print.CMA2 print.CMA3 print.CMA4
> ###   print.CMA5 print.CMA6 print.CMA7 print.CMA8 print.CMA9
> ###   print.CMA_per_episode print.CMA_sliding_window
> 
> ### ** Examples
> 
> cma0 <- CMA0(data=med.events,
+              ID.colname="PATIENT_ID",
+              event.date.colname="DATE",
+              event.duration.colname="DURATION",
+              event.daily.dose.colname="PERDAY",
+              medication.class.colname="CATEGORY",
+              followup.window.start=0,
+              followup.window.start.unit="days",
+              followup.window.duration=2*365,
+              followup.window.duration.unit="days",
+              observation.window.start=30,
+              observation.window.start.unit="days",
+              observation.window.duration=365,
+              observation.window.duration.unit="days",
+              date.format="%m/%d/%Y",
+              summary="Base CMA");
> cma0;
CMA0:
  "Base CMA"
  [
    ID.colname = PATIENT_ID
    event.date.colname = DATE
    event.duration.colname = DURATION
    event.daily.dose.colname = PERDAY
    medication.class.colname = CATEGORY
    followup.window.start = 0
    followup.window.start.unit = days
    followup.window.duration = 730
    followup.window.duration.unit = days
    observation.window.start = 30
    observation.window.start.unit = days
    observation.window.duration = 365
    observation.window.duration.unit = days
    date.format = %m/%d/%Y
  ]
  DATA: 1080 (rows) x 5 (columns) [100 patients].
> print(cma0, format="markdown");
**Base CMA** (CMA0): (on 1080 rows x 5 columns, 100 patients)> cma1 <- CMA1(data=med.events,
+              ID.colname="PATIENT_ID",
+              event.date.colname="DATE",
+              event.duration.colname="DURATION",
+              followup.window.start=30,
+              observation.window.start=30,
+              observation.window.duration=365,
+              date.format="%m/%d/%Y"
+             );
> cma1;
CMA1:
  "The ratio of days with medication available in the observation window excluding the last event; durations of all events added up and divided by number of days from first to last event, possibly resulting in a value >1.0"
  [
    ID.colname = PATIENT_ID
    event.date.colname = DATE
    event.duration.colname = DURATION
    followup.window.start = 30
    followup.window.start.unit = days
    followup.window.duration = 730
    followup.window.duration.unit = days
    observation.window.start = 30
    observation.window.start.unit = days
    observation.window.duration = 365
    observation.window.duration.unit = days
    date.format = %m/%d/%Y
    CMA = CMA results for 100 patients
  ]
  DATA: 1080 (rows) x 5 (columns) [100 patients].
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("print.CMA0", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("prune_event_durations")
> ### * prune_event_durations
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: prune_event_durations
> ### Title: Prune event durations.
> ### Aliases: prune_event_durations
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # select medication class of interest and compute event durations
> ##D 
> ##D disp_data <- durcomp.dispensing[ID == 3 & grepl("J01EE01", ATC.CODE)]
> ##D presc_data <- durcomp.prescribing[ID == 3 & grepl("J01EE01", ATC.CODE)]
> ##D 
> ##D # compute event durations
> ##D event_durations_list <- compute_event_durations(disp.data = disp_data,
> ##D                                                 presc.data = presc_data,
> ##D                                                 special.periods.data = durcomp.hospitalisation,
> ##D                                                 ID.colname = "ID",
> ##D                                                 presc.date.colname = "DATE.PRESC",
> ##D                                                 disp.date.colname = "DATE.DISP",
> ##D                                                 date.format = "%Y-%m-%d",
> ##D                                                 medication.class.colnames = c("ATC.CODE",
> ##D                                                                               "UNIT",
> ##D                                                                               "FORM"),
> ##D                                                 total.dose.colname = "TOTAL.DOSE",
> ##D                                                 presc.daily.dose.colname = "DAILY.DOSE",
> ##D                                                 presc.duration.colname = "PRESC.DURATION",
> ##D                                                 visit.colname = "VISIT",
> ##D                                                 force.init.presc = TRUE,
> ##D                                                 force.presc.renew = TRUE,
> ##D                                                 split.on.dosage.change = TRUE,
> ##D                                                 trt.interruption = "carryover",
> ##D                                                 special.periods.method = "carryover",
> ##D                                                 suppress.warnings = FALSE,
> ##D                                                 return.data.table = TRUE,
> ##D                                                 progress.bar = FALSE)
> ##D 
> ##D # prune event durations
> ##D event_durations <- prune_event_durations(event_durations_list,
> ##D                                          include = c("special periods"),
> ##D                                          medication.class.colnames = "ATC.CODE",
> ##D                                          days.within.out.date.1 = 7,
> ##D                                          days.within.out.date.2 = 30,
> ##D                                          keep.all = FALSE)
> ##D        
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("prune_event_durations", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("time_to_initiation")
> ### * time_to_initiation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: time_to_initiation
> ### Title: Computation of initiation times.
> ### Aliases: time_to_initiation
> 
> ### ** Examples
> 
> time_init <- time_to_initiation(presc.data = durcomp.prescribing,
+                                 disp.data = durcomp.dispensing,
+                                 ID.colname = "ID",
+                                 medication.class.colnames = c("ATC.CODE", "FORM", "UNIT"),
+                                 presc.start.colname = "DATE.PRESC",
+                                 disp.date.colname = "DATE.DISP",
+                                 date.format = "%Y-%m-%d",
+                                 suppress.warnings = FALSE,
+                                 return.data.table = TRUE);
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("time_to_initiation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.886 0.082 2.158 0.001 0.002 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
